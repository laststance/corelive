---
description: Testing patterns using Vitest and React Testing Library
---

# Testing Patterns

## Testing Stack

This project uses:
- **Vitest** - Test runner and framework
- **React Testing Library** - Component testing utilities
- **Happy DOM** - Lightweight DOM implementation
- **Testing Library User Event** - User interaction testing

## Test Configuration

### Vitest Setup
Configuration in [vitest.config.ts](mdc:vitest.config.ts):

```typescript
import { defineConfig } from 'vitest/config'

export default defineConfig({
  test: {
    environment: 'happy-dom',
    globals: true,
    include: [
      'src/**/*.{spec,test}.{js,jsx,ts,tsx}',
      'src/**/__tests__/**/*.{js,jsx,ts,tsx}',
    ],
    exclude: ['src/types/__tests__'],
    setupFiles: ['setupTests.ts'],
  },
  resolve: {
    alias: {
      '@': path.resolve(__dirname, './'),
    },
  },
})
```

### Test Setup
Global test setup in [setupTests.ts](mdc:setupTests.ts):

```typescript
import '@testing-library/jest-dom'
// Additional global test setup
```

## Testing Commands

```bash
# Run all tests
pnpm test

# Run tests in watch mode
pnpm test:watch

# Run tests with UI
pnpm test:ui
```

## Test File Organization

### File Naming Conventions
- **Unit/Integration Tests**: `ComponentName.test.tsx` or `functionName.test.ts`
- **Test Directories**: `__tests__/` folders for grouping related tests
- **Hook Tests**: `useHookName.test.ts`

### Test File Structure
```typescript
import { describe, it, expect, beforeEach, afterEach } from 'vitest'
import { render, screen, fireEvent } from '@testing-library/react'
import userEvent from '@testing-library/user-event'

import ComponentName from './ComponentName'

describe('ComponentName', () => {
  beforeEach(() => {
    // Setup before each test
  })

  afterEach(() => {
    // Cleanup after each test
  })

  it('should render correctly', () => {
    // Test implementation
  })
})
```

## Component Testing Patterns

### Basic Component Testing
```typescript
import { render, screen } from '@testing-library/react'
import { describe, it, expect } from 'vitest'

import Button from './Button'

describe('Button', () => {
  it('renders with correct text', () => {
    render(<Button>Click me</Button>)
    
    expect(screen.getByRole('button', { name: 'Click me' })).toBeInTheDocument()
  })

  it('applies custom className', () => {
    render(<Button className="custom-class">Test</Button>)
    
    expect(screen.getByRole('button')).toHaveClass('custom-class')
  })

  it('handles click events', async () => {
    const handleClick = vi.fn()
    const user = userEvent.setup()
    
    render(<Button onClick={handleClick}>Click me</Button>)
    
    await user.click(screen.getByRole('button'))
    expect(handleClick).toHaveBeenCalledOnce()
  })
})
```

### Testing Components with Props
```typescript
interface UserCardProps {
  user: {
    id: string
    name: string
    email: string
  }
  onEdit?: (userId: string) => void
}

describe('UserCard', () => {
  const mockUser = {
    id: '1',
    name: 'John Doe',
    email: 'john@example.com'
  }

  it('displays user information', () => {
    render(<UserCard user={mockUser} />)
    
    expect(screen.getByText('John Doe')).toBeInTheDocument()
    expect(screen.getByText('john@example.com')).toBeInTheDocument()
  })

  it('calls onEdit when edit button is clicked', async () => {
    const onEdit = vi.fn()
    const user = userEvent.setup()
    
    render(<UserCard user={mockUser} onEdit={onEdit} />)
    
    await user.click(screen.getByRole('button', { name: /edit/i }))
    expect(onEdit).toHaveBeenCalledWith('1')
  })
})
```

## Hook Testing Patterns

### Testing Custom Hooks
Example from [src/hooks/useIsFirstRender.test.ts](mdc:src/hooks/useIsFirstRender.test.ts):

```typescript
import { renderHook } from '@testing-library/react'
import { describe, it, expect } from 'vitest'

import { useIsFirstRender } from './useIsFirstRender'

describe('useIsFirstRender', () => {
  it('should return true on first render and false on subsequent renders', () => {
    const { result, rerender } = renderHook(() => useIsFirstRender())

    // First render should return true
    expect(result.current).toBe(true)

    // Re-render the hook
    rerender()

    // Now it should return false
    expect(result.current).toBe(false)

    // Additional re-renders should still return false
    rerender()
    expect(result.current).toBe(false)
  })
})
```

### Testing Hooks with State
```typescript
import { renderHook, act } from '@testing-library/react'

describe('useCounter', () => {
  it('should increment count', () => {
    const { result } = renderHook(() => useCounter(0))

    expect(result.current.count).toBe(0)

    act(() => {
      result.current.increment()
    })

    expect(result.current.count).toBe(1)
  })
})
```

## API Route Testing

### Testing API Handlers
```typescript
import { describe, it, expect, vi } from 'vitest'
import { NextRequest } from 'next/server'

import { POST } from './route'

// Mock Prisma
vi.mock('@/lib/prisma', () => ({
  prisma: {
    user: {
      create: vi.fn(),
      findUnique: vi.fn(),
    }
  }
}))

describe('/api/users', () => {
  it('creates a new user', async () => {
    const request = new NextRequest('http://localhost/api/users', {
      method: 'POST',
      body: JSON.stringify({
        clerkId: 'user_123',
        email: 'test@example.com',
        name: 'Test User'
      })
    })

    const response = await POST(request)
    const data = await response.json()

    expect(response.status).toBe(201)
    expect(data).toMatchObject({
      clerkId: 'user_123',
      email: 'test@example.com',
      name: 'Test User'
    })
  })
})
```

## Testing with External Dependencies

### Mocking Clerk Authentication
```typescript
import { vi } from 'vitest'

// Mock Clerk hooks
vi.mock('@clerk/nextjs', () => ({
  useUser: () => ({
    user: {
      id: 'user_123',
      emailAddresses: [{ emailAddress: 'test@example.com' }]
    },
    isLoaded: true,
    isSignedIn: true
  }),
  useAuth: () => ({
    userId: 'user_123',
    sessionId: 'session_123'
  }),
  useClerk: () => ({
    signOut: vi.fn()
  })
}))
```

### Mocking Prisma
```typescript
import { vi } from 'vitest'

vi.mock('@/lib/prisma', () => ({
  prisma: {
    user: {
      findUnique: vi.fn(),
      create: vi.fn(),
      update: vi.fn(),
      delete: vi.fn()
    },
    category: {
      findMany: vi.fn(),
      create: vi.fn()
    }
  }
}))
```

## Testing Best Practices

### Accessibility Testing
```typescript
import { render } from '@testing-library/react'
import { axe, toHaveNoViolations } from 'jest-axe'

expect.extend(toHaveNoViolations)

describe('Button accessibility', () => {
  it('should not have accessibility violations', async () => {
    const { container } = render(<Button>Accessible button</Button>)
    const results = await axe(container)
    expect(results).toHaveNoViolations()
  })
})
```

### Testing Error States
```typescript
describe('ErrorBoundary', () => {
  it('displays error message when child component throws', () => {
    const ThrowError = () => {
      throw new Error('Test error')
    }

    render(
      <ErrorBoundary>
        <ThrowError />
      </ErrorBoundary>
    )

    expect(screen.getByText(/something went wrong/i)).toBeInTheDocument()
  })
})
```

### Testing Loading States
```typescript
describe('UserProfile', () => {
  it('displays loading spinner while fetching user data', () => {
    render(<UserProfile userId="123" />)
    
    expect(screen.getByTestId('loading-spinner')).toBeInTheDocument()
  })

  it('displays user data after loading', async () => {
    render(<UserProfile userId="123" />)
    
    await waitFor(() => {
      expect(screen.getByText('John Doe')).toBeInTheDocument()
    })
  })
})
```

## Test Data Management

### Test Factories
```typescript
// test/factories/userFactory.ts
export const createMockUser = (overrides = {}) => ({
  id: '1',
  clerkId: 'user_123',
  name: 'Test User',
  email: 'test@example.com',
  createdAt: new Date('2024-01-01'),
  updatedAt: new Date('2024-01-01'),
  ...overrides
})

export const createMockCategory = (overrides = {}) => ({
  id: 1,
  name: 'Test Category',
  userId: 1,
  createdAt: new Date('2024-01-01'),
  updatedAt: new Date('2024-01-01'),
  ...overrides
})
```

### Using Test Factories
```typescript
import { createMockUser, createMockCategory } from '@/test/factories'

describe('UserDashboard', () => {
  it('renders user categories', () => {
    const user = createMockUser({ name: 'John Doe' })
    const categories = [
      createMockCategory({ name: 'Work' }),
      createMockCategory({ name: 'Personal' })
    ]

    render(<UserDashboard user={user} categories={categories} />)
    
    expect(screen.getByText('Work')).toBeInTheDocument()
    expect(screen.getByText('Personal')).toBeInTheDocument()
  })
})
```

## Coverage and Quality

### Test Coverage Goals
- Aim for >80% code coverage
- Focus on critical business logic
- Test happy paths and error cases
- Include edge cases and boundary conditions

### Test Quality Guidelines
- Write descriptive test names
- Use the AAA pattern (Arrange, Act, Assert)
- Keep tests focused and independent
- Mock external dependencies appropriately
- Test behavior, not implementation details

