---
description: Database patterns using Prisma ORM
---

# Database Patterns

## Prisma ORM Integration

This project uses [Prisma](https://prisma.io) as the ORM with PostgreSQL database.

### Database Schema

The database schema is defined in [prisma/schema.prisma](mdc:prisma/schema.prisma) with the following models:

#### User Model
```prisma
model User {
  id        Int         @id @default(autoincrement())
  clerkId   String      @unique
  email     String?     @unique
  name      String?
  bio       String?
  categories Category[]
  completed Completed[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}
```

#### Category Model
```prisma
model Category {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  completed Completed[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
```

#### Completed Model
```prisma
model Completed {
  id        Int      @id @default(autoincrement())
  archived  Boolean  @default(false)
  title     String   @db.VarChar(255)
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  category  Category @relation(fields: [categoryId], references: [id])
  categoryId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
```

### Prisma Client Setup

The Prisma client is configured in [src/lib/prisma.ts](mdc:src/lib/prisma.ts):

```typescript
import { PrismaClient } from '@prisma/client'

const globalForPrisma = globalThis as unknown as {
  prisma: PrismaClient | undefined
}

export const prisma = globalForPrisma.prisma ?? new PrismaClient()

if (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma
```

### Database Operations

#### User Operations

##### Create User
```typescript
import { prisma } from '@/lib/prisma'

// Create new user from Clerk webhook
const createUser = async (clerkId: string, email?: string, name?: string) => {
  try {
    const user = await prisma.user.create({
      data: {
        clerkId,
        email,
        name,
      }
    })
    return user
  } catch (error) {
    console.error('Failed to create user:', error)
    throw new Error('User creation failed')
  }
}
```

##### Get User with Relations
```typescript
// Get user with categories and completed tasks
const getUserWithData = async (clerkId: string) => {
  try {
    const user = await prisma.user.findUnique({
      where: { clerkId },
      include: {
        categories: {
          orderBy: { createdAt: 'desc' }
        },
        completed: {
          where: { archived: false },
          orderBy: { createdAt: 'desc' }
        }
      }
    })
    return user
  } catch (error) {
    console.error('Failed to get user data:', error)
    throw new Error('Failed to retrieve user data')
  }
}
```

#### Category Operations

##### Create Category
```typescript
const createCategory = async (userId: number, name: string) => {
  try {
    const category = await prisma.category.create({
      data: {
        name,
        userId,
      }
    })
    return category
  } catch (error) {
    // Handle unique constraint violation
    if (error.code === 'P2002') {
      throw new Error('Category with this name already exists')
    }
    console.error('Failed to create category:', error)
    throw new Error('Category creation failed')
  }
}
```

##### Get User Categories
```typescript
const getUserCategories = async (userId: number) => {
  try {
    const categories = await prisma.category.findMany({
      where: { userId },
      include: {
        completed: {
          where: { archived: false }
        }
      },
      orderBy: { createdAt: 'desc' }
    })
    return categories
  } catch (error) {
    console.error('Failed to get categories:', error)
    throw new Error('Failed to retrieve categories')
  }
}
```

#### Completed Task Operations

##### Create Completed Task
```typescript
const createCompletedTask = async (
  userId: number,
  categoryId: number,
  title: string
) => {
  try {
    const completed = await prisma.completed.create({
      data: {
        title,
        userId,
        categoryId,
      },
      include: {
        category: true,
        user: true
      }
    })
    return completed
  } catch (error) {
    console.error('Failed to create completed task:', error)
    throw new Error('Task creation failed')
  }
}
```

##### Archive Completed Task
```typescript
const archiveCompletedTask = async (taskId: number, userId: number) => {
  try {
    const task = await prisma.completed.update({
      where: {
        id: taskId,
        userId, // Ensure user owns the task
      },
      data: {
        archived: true,
      }
    })
    return task
  } catch (error) {
    console.error('Failed to archive task:', error)
    throw new Error('Task archival failed')
  }
}
```

### Database Best Practices

#### Query Optimization

##### Use Select for Specific Fields
```typescript
// Only select needed fields
const user = await prisma.user.findUnique({
  where: { clerkId },
  select: {
    id: true,
    name: true,
    email: true,
  }
})
```

##### Use Include Wisely
```typescript
// Include related data when needed
const userWithCategories = await prisma.user.findUnique({
  where: { clerkId },
  include: {
    categories: {
      take: 10, // Limit number of categories
      orderBy: { createdAt: 'desc' }
    }
  }
})
```

#### Transaction Handling

##### Use Transactions for Multiple Operations
```typescript
const createCategoryWithTask = async (
  userId: number,
  categoryName: string,
  taskTitle: string
) => {
  try {
    const result = await prisma.$transaction(async (tx) => {
      // Create category
      const category = await tx.category.create({
        data: {
          name: categoryName,
          userId,
        }
      })

      // Create completed task
      const completed = await tx.completed.create({
        data: {
          title: taskTitle,
          userId,
          categoryId: category.id,
        }
      })

      return { category, completed }
    })
    
    return result
  } catch (error) {
    console.error('Transaction failed:', error)
    throw new Error('Failed to create category and task')
  }
}
```

#### Error Handling

##### Handle Prisma Errors
```typescript
import { Prisma } from '@prisma/client'

const handlePrismaError = (error: unknown) => {
  if (error instanceof Prisma.PrismaClientKnownRequestError) {
    switch (error.code) {
      case 'P2002':
        // Unique constraint violation
        return 'A record with this information already exists'
      case 'P2025':
        // Record not found
        return 'Record not found'
      case 'P2003':
        // Foreign key constraint violation
        return 'Related record not found'
      default:
        console.error('Database error:', error)
        return 'Database operation failed'
    }
  }
  
  console.error('Unexpected error:', error)
  return 'An unexpected error occurred'
}
```

### Migration Patterns

#### Development Migrations
```bash
# Create and apply migration
pnpm prisma migrate dev --name <migration_name>

# Generate Prisma client
pnpm prisma generate
```

#### Production Migrations
```bash
# Apply migrations in production
pnpm prisma migrate deploy

# Check migration status
pnpm prisma migrate status
```

### Data Validation

#### Use Zod for Input Validation
```typescript
import { z } from 'zod'

const CreateCategorySchema = z.object({
  name: z.string().min(1).max(255),
  userId: z.number().positive(),
})

const createCategoryFromInput = async (input: unknown) => {
  try {
    const validatedInput = CreateCategorySchema.parse(input)
    return await createCategory(validatedInput.userId, validatedInput.name)
  } catch (error) {
    if (error instanceof z.ZodError) {
      throw new Error('Invalid input data')
    }
    throw error
  }
}
```

### Performance Considerations

- Use connection pooling (handled by Prisma)
- Implement proper indexing in schema
- Use pagination for large result sets
- Consider caching for frequently accessed data
- Monitor query performance in production

