---
description: UI component patterns and best practices
globs: src/app/**/*.{ts,tsx},src/components/**/*.{ts,tsx}
---

# UI Component Patterns

## Design System

This project uses Tailwind CSS for styling with a focus on modern, clean, and accessible design inspired by platforms like Instagram.

### Tailwind Configuration

Tailwind CSS is configured with:
- **Version**: 4.x (latest)
- **PostCSS**: For processing styles
- **Prettier Plugin**: For automatic class sorting
- **Custom Plugins**: Forms plugin for enhanced form styling

### Color Palette

Use Tailwind's default color palette with semantic naming:
```typescript
// Primary colors
'bg-blue-600 hover:bg-blue-700'  // Primary buttons
'bg-gray-100 hover:bg-gray-200'  // Secondary buttons
'bg-red-600 hover:bg-red-700'    // Destructive actions

// Text colors
'text-gray-900'    // Primary text
'text-gray-600'    // Secondary text
'text-gray-400'    // Muted text
```

## Component Architecture

### Component Structure
```typescript
interface ComponentProps {
  children?: React.ReactNode
  className?: string
  // Other specific props
}

const Component: React.FC<ComponentProps> = ({ 
  children, 
  className,
  ...props 
}) => {
  return (
    <div className={cn('base-styles', className)} {...props}>
      {children}
    </div>
  )
}

export default Component
```

### Class Name Utilities

Use the `cn` utility from [src/lib/utils.ts](mdc:src/lib/utils.ts) for conditional classes:

```typescript
import { cn } from '@/lib/utils'

const Button: React.FC<ButtonProps> = ({ 
  variant = 'primary', 
  size = 'md',
  className,
  children,
  ...props 
}) => {
  return (
    <button
      className={cn(
        // Base styles
        'inline-flex items-center justify-center rounded-md font-medium transition-colors',
        'focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2',
        
        // Variant styles
        {
          'bg-blue-600 text-white hover:bg-blue-700': variant === 'primary',
          'bg-gray-100 text-gray-900 hover:bg-gray-200': variant === 'secondary',
          'bg-transparent text-blue-600 hover:bg-blue-50': variant === 'ghost',
        },
        
        // Size styles
        {
          'h-8 px-3 text-sm': size === 'sm',
          'h-10 px-4': size === 'md',
          'h-12 px-6 text-lg': size === 'lg',
        },
        
        className
      )}
      {...props}
    >
      {children}
    </button>
  )
}
```

## Component Patterns

### Button Components

#### Base Button
```typescript
interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
  variant?: 'primary' | 'secondary' | 'ghost' | 'destructive'
  size?: 'sm' | 'md' | 'lg'
  isLoading?: boolean
  leftIcon?: React.ReactNode
  rightIcon?: React.ReactNode
}

const Button: React.FC<ButtonProps> = ({
  variant = 'primary',
  size = 'md',
  isLoading = false,
  leftIcon,
  rightIcon,
  children,
  className,
  disabled,
  ...props
}) => {
  return (
    <button
      className={cn(
        'inline-flex items-center justify-center gap-2 rounded-md font-medium transition-colors',
        'focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2',
        'disabled:pointer-events-none disabled:opacity-50',
        buttonVariants({ variant, size }),
        className
      )}
      disabled={disabled || isLoading}
      {...props}
    >
      {isLoading ? (
        <Loader2 className="h-4 w-4 animate-spin" />
      ) : (
        leftIcon
      )}
      {children}
      {!isLoading && rightIcon}
    </button>
  )
}
```

#### Icon Button
```typescript
interface IconButtonProps extends Omit<ButtonProps, 'leftIcon' | 'rightIcon' | 'children'> {
  icon: React.ReactNode
  'aria-label': string
}

const IconButton: React.FC<IconButtonProps> = ({
  icon,
  size = 'md',
  className,
  ...props
}) => {
  return (
    <Button
      size={size}
      className={cn(
        'aspect-square p-0',
        {
          'h-8 w-8': size === 'sm',
          'h-10 w-10': size === 'md',
          'h-12 w-12': size === 'lg',
        },
        className
      )}
      {...props}
    >
      {icon}
    </Button>
  )
}
```

### Card Components

```typescript
interface CardProps extends React.HTMLAttributes<HTMLDivElement> {
  children: React.ReactNode
}

const Card: React.FC<CardProps> = ({ children, className, ...props }) => {
  return (
    <div
      className={cn(
        'rounded-lg border border-gray-200 bg-white shadow-sm',
        className
      )}
      {...props}
    >
      {children}
    </div>
  )
}

const CardHeader: React.FC<CardProps> = ({ children, className, ...props }) => {
  return (
    <div
      className={cn('flex flex-col space-y-1.5 p-6', className)}
      {...props}
    >
      {children}
    </div>
  )
}

const CardContent: React.FC<CardProps> = ({ children, className, ...props }) => {
  return (
    <div className={cn('p-6 pt-0', className)} {...props}>
      {children}
    </div>
  )
}
```

### Form Components

#### Input Component
```typescript
interface InputProps extends React.InputHTMLAttributes<HTMLInputElement> {
  label?: string
  error?: string
  helperText?: string
}

const Input = React.forwardRef<HTMLInputElement, InputProps>(
  ({ label, error, helperText, className, id, ...props }, ref) => {
    const inputId = id || `input-${Math.random().toString(36).substr(2, 9)}`
    
    return (
      <div className="space-y-1">
        {label && (
          <label
            htmlFor={inputId}
            className="block text-sm font-medium text-gray-700"
          >
            {label}
          </label>
        )}
        <input
          id={inputId}
          ref={ref}
          className={cn(
            'flex h-10 w-full rounded-md border border-gray-300 bg-white px-3 py-2',
            'text-sm placeholder:text-gray-400',
            'focus:border-blue-500 focus:outline-none focus:ring-1 focus:ring-blue-500',
            'disabled:cursor-not-allowed disabled:opacity-50',
            error && 'border-red-500 focus:border-red-500 focus:ring-red-500',
            className
          )}
          {...props}
        />
        {error && (
          <p className="text-sm text-red-600" role="alert">
            {error}
          </p>
        )}
        {helperText && !error && (
          <p className="text-sm text-gray-500">{helperText}</p>
        )}
      </div>
    )
  }
)
```

### Loading States

#### Skeleton Component
```typescript
interface SkeletonProps extends React.HTMLAttributes<HTMLDivElement> {
  className?: string
}

const Skeleton: React.FC<SkeletonProps> = ({ className, ...props }) => {
  return (
    <div
      className={cn(
        'animate-pulse rounded-md bg-gray-200',
        className
      )}
      {...props}
    />
  )
}

// Usage examples
const UserCardSkeleton = () => (
  <Card className="p-6">
    <div className="flex items-center space-x-4">
      <Skeleton className="h-12 w-12 rounded-full" />
      <div className="space-y-2">
        <Skeleton className="h-4 w-[200px]" />
        <Skeleton className="h-4 w-[150px]" />
      </div>
    </div>
  </Card>
)
```

#### Loading Spinner
```typescript
import { Loader2 } from 'lucide-react'

interface LoadingSpinnerProps {
  size?: 'sm' | 'md' | 'lg'
  className?: string
}

const LoadingSpinner: React.FC<LoadingSpinnerProps> = ({ 
  size = 'md', 
  className 
}) => {
  return (
    <Loader2
      className={cn(
        'animate-spin',
        {
          'h-4 w-4': size === 'sm',
          'h-6 w-6': size === 'md',
          'h-8 w-8': size === 'lg',
        },
        className
      )}
    />
  )
}
```

## Layout Patterns

### Container Layout
```typescript
interface ContainerProps extends React.HTMLAttributes<HTMLDivElement> {
  size?: 'sm' | 'md' | 'lg' | 'xl' | 'full'
}

const Container: React.FC<ContainerProps> = ({
  size = 'lg',
  className,
  children,
  ...props
}) => {
  return (
    <div
      className={cn(
        'mx-auto px-4 sm:px-6 lg:px-8',
        {
          'max-w-2xl': size === 'sm',
          'max-w-4xl': size === 'md',
          'max-w-6xl': size === 'lg',
          'max-w-7xl': size === 'xl',
          'max-w-none': size === 'full',
        },
        className
      )}
      {...props}
    >
      {children}
    </div>
  )
}
```

### Grid Layouts
```typescript
// Auto-responsive grid
const AutoGrid: React.FC<{ children: React.ReactNode; className?: string }> = ({
  children,
  className
}) => (
  <div
    className={cn(
      'grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4',
      className
    )}
  >
    {children}
  </div>
)

// Stack layout
const Stack: React.FC<{
  children: React.ReactNode
  spacing?: 'sm' | 'md' | 'lg'
  className?: string
}> = ({ children, spacing = 'md', className }) => (
  <div
    className={cn(
      'flex flex-col',
      {
        'space-y-2': spacing === 'sm',
        'space-y-4': spacing === 'md',
        'space-y-6': spacing === 'lg',
      },
      className
    )}
  >
    {children}
  </div>
)
```

## Responsive Design

### Breakpoint Usage
```typescript
// Mobile-first responsive design
<div className="
  grid grid-cols-1     // Mobile: 1 column
  sm:grid-cols-2       // Small: 2 columns
  md:grid-cols-3       // Medium: 3 columns
  lg:grid-cols-4       // Large: 4 columns
  xl:grid-cols-5       // Extra large: 5 columns
">
```

### Typography Scale
```typescript
// Headings
'text-xs'      // 12px - Small captions
'text-sm'      // 14px - Body text small
'text-base'    // 16px - Body text
'text-lg'      // 18px - Large body text
'text-xl'      // 20px - Small headings
'text-2xl'     // 24px - Section headings
'text-3xl'     // 30px - Page headings
'text-4xl'     // 36px - Hero headings

// Responsive typography
'text-lg md:text-xl lg:text-2xl'
```

## Accessibility Patterns

### Focus Management
```typescript
// Proper focus styles
'focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2'

// Skip to main content
const SkipToMain = () => (
  <a
    href="#main-content"
    className="sr-only focus:not-sr-only focus:absolute focus:top-4 focus:left-4 
               z-50 bg-blue-600 text-white px-4 py-2 rounded-md"
  >
    Skip to main content
  </a>
)
```

### ARIA Patterns
```typescript
// Button with loading state
<button
  disabled={isLoading}
  aria-disabled={isLoading}
  aria-describedby={error ? 'error-message' : undefined}
>
  {isLoading ? 'Loading...' : 'Submit'}
</button>

// Form with error message
<input
  aria-invalid={!!error}
  aria-describedby={error ? 'field-error' : 'field-help'}
/>
{error && (
  <div id="field-error" role="alert" className="text-red-600">
    {error}
  </div>
)}
```

### Screen Reader Support
```typescript
// Visually hidden text for context
const VisuallyHidden: React.FC<{ children: React.ReactNode }> = ({ children }) => (
  <span className="sr-only">{children}</span>
)

// Loading announcements
const [loading, setLoading] = useState(false)

return (
  <>
    <div aria-live="polite" aria-atomic="true" className="sr-only">
      {loading && 'Loading content...'}
    </div>
    <button onClick={() => setLoading(true)}>
      Load content
      {loading && <VisuallyHidden>Loading...</VisuallyHidden>}
    </button>
  </>
)
```

## Animation Patterns

### Tailwind Animations
```typescript
// Built-in animations
'animate-spin'     // Loading spinners
'animate-pulse'    // Skeleton loading
'animate-bounce'   // Attention-grabbing
'animate-ping'     // Notification badges

// Custom transitions
'transition-colors duration-200'    // Color changes
'transition-transform duration-300' // Scale/move
'transition-opacity duration-150'   // Fade in/out
```

### Hover and Active States
```typescript
// Interactive elements
'hover:bg-gray-50 active:bg-gray-100'
'hover:scale-105 active:scale-95'
'hover:shadow-md transition-shadow'

// Focus-visible for keyboard navigation
'focus-visible:ring-2 focus-visible:ring-blue-500'
```

## Performance Optimization

### Image Optimization
```typescript
import Image from 'next/image'

// Optimized images
<Image
  src="/avatar.jpg"
  alt="User avatar"
  width={48}
  height={48}
  className="rounded-full"
  priority={isAboveTheFold}
/>
```

### Lazy Loading Components
```typescript
import { lazy, Suspense } from 'react'

const HeavyComponent = lazy(() => import('./HeavyComponent'))

const App = () => (
  <Suspense fallback={<LoadingSpinner />}>
    <HeavyComponent />
  </Suspense>
)
```
