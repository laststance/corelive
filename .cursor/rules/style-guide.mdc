---
description: Tailwind v4 tokens and UI component styling conventions for shadcn/ui-style wrappers in this repo. Applies to Tailwind config, globals, and all ui/*.tsx.
globs: tailwind.config.ts, src/globals.css, src/components/ui/*.tsx, **/*.tsx
---

# Corelive Design System Guide

This rule records the shared Tailwind CSS tokens and component styling conventions used across UI components. It is intended for contributors creating or editing files under `src/components`.

Reference files: [tailwind.config.ts](mdc:tailwind.config.ts), [src/globals.css](mdc:src/globals.css), [src/components/Document.mdx](mdc:src/components/Document.mdx).

## Tailwind v4 Tokens and Settings

- Dark mode: `class` strategy. See [tailwind.config.ts](mdc:tailwind.config.ts) `darkMode: 'class'`.
- Design tokens mapped as CSS variables in [src/globals.css](mdc:src/globals.css) and surfaced to Tailwind classes via config extensions:
  - Surfaces and text: `bg-background`, `text-foreground`, `bg-card`, `text-card-foreground`, `bg-popover`, `text-popover-foreground`
  - Roles: `bg-primary`, `text-primary-foreground`, `bg-secondary`, `text-secondary-foreground`, `bg-muted`, `text-muted-foreground`, `bg-accent`, `text-accent-foreground`, `bg-destructive`
  - Borders/inputs/focus: `border-border`, `border-input`, `ring-ring`
  - Charts: `bg-[var(--chart-1)]` .. `bg-[var(--chart-5)]`
  - Sidebar (theme extension): `bg-sidebar`, `text-sidebar-foreground`, `bg-sidebar-primary`, `text-sidebar-primary-foreground`, `bg-sidebar-accent`, `text-sidebar-accent-foreground`
- Radii tokens (via `@theme inline`): `--radius-sm`, `--radius-md`, `--radius-lg`, `--radius-xl` and CSS `--radius` base. Prefer Tailwind rounded utilities aligned with these.
- Safelist: Frequently used token classes are kept in the safelist of [tailwind.config.ts](mdc:tailwind.config.ts) to ensure availability in docs/examples.
- Global base styles: [src/globals.css](mdc:src/globals.css) applies `@layer base` with `body` using `bg-background text-foreground` and global outline hints.

## Shared Styling Conventions

- Always accept a `className` prop and merge with the component’s base classes using `cn` from `@/lib/utils`.
- Add a stable `data-slot` attribute to each exported element to support targeted styling and docs testing. Example: `data-slot="button"`, `data-slot="dialog-content"`.
- Focus styles (keyboard accessibility):
  - Use the standardized trio on focusable elements: `focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]`.
- Disabled/Invalid states:
  - Disabled: `disabled:pointer-events-none disabled:opacity-50` (and/or `disabled:cursor-not-allowed` for inputs).
  - Invalid inputs/controls: `aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive`.
- Dark mode considerations:
  - Inputs use subtle backgrounds in dark mode (e.g., `dark:bg-input/30` with hover/active variants if needed).
- Icons:
  - Lucide icons are used. Default scaling via Tailwind `size-*`; ensure icons don’t steal pointer events: `[&_svg]:pointer-events-none` and maintain consistent sizing `[_svg:not([class*='size-'])]:size-4`.
- State/animation attributes from Radix and libraries:
  - Prefer attribute-based transitions: `data-[state=open]:animate-in ...`, `data-[state=closed]:animate-out ...` and slide/zoom helpers used throughout overlays (`dialog`, `sheet`, `popover`, `hover-card`, menus).
- Composition over configuration:
  - Many components are thin wrappers around Radix primitives or library components. Forward all primitive props via `React.ComponentProps<typeof Primitive>` and keep wrapper logic minimal.
- Client components:
  - Interactive wrappers include `'use client'` and export named functions only. Place `'use client'` at the top when required.

## Variant and Size Patterns (class-variance-authority)

- Use `cva` for components with visual variants and sizes (e.g., `button`, `badge`, `alert`).
- Export the variant helper when generally useful (e.g., `export { buttonVariants }`).
- Typical pattern:

```ts
import { cva, type VariantProps } from 'class-variance-authority'

const buttonVariants = cva(
  'inline-flex items-center justify-center text-sm font-medium rounded-md transition-all outline-none ' +
  'focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] ' +
  'disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0',
  {
    variants: {
      variant: {
        default: 'bg-primary text-primary-foreground hover:bg-primary/90',
        secondary: 'bg-secondary text-secondary-foreground hover:bg-secondary/80',
        outline: 'border bg-background hover:bg-accent hover:text-accent-foreground',
        ghost: 'hover:bg-accent hover:text-accent-foreground',
        destructive: 'bg-destructive text-white hover:bg-destructive/90',
        link: 'text-primary underline-offset-4 hover:underline',
      },
      size: {
        sm: 'h-8 px-3',
        default: 'h-9 px-4',
        lg: 'h-10 px-6',
        icon: 'size-9',
      },
    },
    defaultVariants: { variant: 'default', size: 'default' },
  },
)
```

## Component-by-Component Notes

- Button ([src/components/ui/button.tsx](mdc:src/components/ui/button.tsx))
  - Provides `variant` and `size` via `cva`; exports `buttonVariants`. Supports `asChild` for Slot rendering.
- Badge ([src/components/ui/badge.tsx](mdc:src/components/ui/badge.tsx))
  - `variant`: `default | secondary | outline | destructive`. `asChild` supported.
- Inputs ([src/components/ui/input.tsx](mdc:src/components/ui/input.tsx), [src/components/ui/textarea.tsx](mdc:src/components/ui/textarea.tsx))
  - Include invalid state styles and focus rings. File input leverages Tailwind’s `file:` utilities.
- Select ([src/components/ui/select.tsx](mdc:src/components/ui/select.tsx))
  - Radix Select wrapper with `SelectTrigger` supporting `data-size` (`sm | default`). Content uses shared overlay transitions.
- Checkbox / Radio ([src/components/ui/checkbox.tsx](mdc:src/components/ui/checkbox.tsx), [src/components/ui/radio-group.tsx](mdc:src/components/ui/radio-group.tsx))
  - Use `border-input` for frames, selected states use role color tokens. Indicators are centered and sized via `size-*`.
- Dialog / AlertDialog / Drawer / Sheet / Popover / HoverCard
  - Use consistent overlay + content transitions and `bg-background` surfaces with border and shadow tokens.
  - Close buttons use `XIcon` with accessible `sr-only` labels when present.
- Menus (Dropdown, Context, Menubar, NavigationMenu)
  - Menu items share focus/hover/accent patterns. Destructive variants are supported via `data-variant=destructive` or dedicated classes.
  - Triggers share `navigationMenuTriggerStyle` via `cva` in NavigationMenu.
- Calendar ([src/components/ui/calendar.tsx](mdc:src/components/ui/calendar.tsx))
  - Composes `react-day-picker`; reuses `buttonVariants` for nav and days; supports RTL and configurable caption UI.
- Carousel ([src/components/ui/carousel.tsx](mdc:src/components/ui/carousel.tsx))
  - Embla-based with keyboard arrow navigation and disabled previous/next states.
- Sidebar ([src/components/ui/sidebar.tsx](mdc:src/components/ui/sidebar.tsx))
  - Responsive, cookie-persisted state. Desktop uses off-canvas/icon variants; mobile uses `Sheet`. Provides many `data-*` attributes for fine-grained styling.
- Chart ([src/components/ui/chart.tsx](mdc:src/components/ui/chart.tsx))
  - Injects CSS variables per series via `ChartStyle`. Tooltip and legend components read series config from context.
- Form ([src/components/ui/form.tsx](mdc:src/components/ui/form.tsx))
  - RHF bindings with generics, `useFormField` helper to wire ids/aria and show errors in `FormMessage`.

## Accessibility Checklist

- Provide `sr-only` labels where visual affordances are icon-only.
- Use `aria-current="page"` for active pagination links; `role="link"` + `aria-disabled` for non-interactive page labels.
- Forward `aria-*` props from wrappers; do not strip unknown props.
- Ensure keyboard focus is visible and not trapped. Overlay content uses close buttons with clear labels.

## Implementation Checklist

- [ ] Keep tokens from [src/globals.css](mdc:src/globals.css) and class mappings from [tailwind.config.ts](mdc:tailwind.config.ts) as the single source of truth.
- [ ] Use `data-slot` on all exported elements. Prefer stable slot names (e.g., `button`, `dialog-content`, `popover-content`).
- [ ] Merge `className` using `cn`. Do not overwrite consumer classes.
- [ ] Apply standard focus-visible and invalid-state classes to interactive elements.
- [ ] For variantable components, use `cva` and export the variant helper where helpful.
- [ ] Use tokens (`bg-*`, `text-*`, `border-*`, `ring-*`) instead of hard-coded colors.
- [ ] Keep interactive wrappers as client components with `'use client'` when needed.

## Notes

- The tokens listed are also summarized for designers and authors in [src/components/Document.mdx](mdc:src/components/Document.mdx).
- When creating new UI primitives, mirror the naming, state attributes, and accessibility patterns from similar existing components to maintain consistency.
