---
alwaysApply: true
---

# Project Structure Guide

## Architecture Overview
This is a Next.js 15 project using the App Router architecture with TypeScript, Tailwind CSS, Prisma, and Clerk authentication.

## Key Directories

### `/src/app/` - Next.js App Router
- **Root Layout**: [src/app/layout.tsx](mdc:src/app/layout.tsx) - Main layout with ClerkProvider
- **Pages**: Each directory represents a route
- **API Routes**: [src/app/api/](mdc:src/app/api/) for backend endpoints
- **Route Groups**: Use `(name)` for organization without affecting URL structure
- **Dynamic Routes**: Use `[param]` for dynamic segments
- **Catch-all Routes**: Use `[[...param]]` for optional catch-all routes

### `/src/components/` - Reusable UI Components
- Shared components used across multiple pages
- Follow component naming conventions (PascalCase)
- Export components as default exports

### `/src/lib/` - Utility Libraries
- [src/lib/utils.ts](mdc:src/lib/utils.ts) - Shared utility functions
- [src/lib/prisma.ts](mdc:src/lib/prisma.ts) - Prisma client configuration
- Database helpers and shared business logic

### `/src/hooks/` - Custom React Hooks
- Custom hooks for shared stateful logic
- Name with `use` prefix (e.g., `useIsFirstRender`)
- Include corresponding test files

### `/src/types/` - TypeScript Type Definitions
- Shared type definitions and interfaces
- Utility types for the application

### `/prisma/` - Database Schema and Migrations
- [prisma/schema.prisma](mdc:prisma/schema.prisma) - Database schema
- Migration files in `prisma/migrations/`

## File Naming Conventions
- **Pages**: `page.tsx` for route components
- **Layouts**: `layout.tsx` for layout components
- **Components**: PascalCase (e.g., `SignoutButton.tsx`)
- **Hooks**: camelCase with `use` prefix
- **Utils**: camelCase
- **Types**: camelCase or PascalCase for interfaces

## Import Patterns
- Use `@/` alias for imports from the root directory
- Organize imports: external packages first, then internal modules
- Use default exports for components and pages
- Use named exports for utilities and types

## Environment Configuration
- Environment variables defined in [src/env.mjs](mdc:src/env.mjs) using T3 env pattern
- Server-side variables in `server` object
- Client-side variables in `client` object (must be prefixed with `NEXT_PUBLIC_`)
